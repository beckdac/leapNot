#!/usr/bin/env python3

"""
leapNot.
Performs # of 'passes' at evenly spaced number of
'powers' at 'speeds' intervals from 'min' to 'max'
measured in machine units.  
E.g. ./leapNot 6 4 4 80 200 5 5 30

Usage:
  leapNot PASSES POWERS SPEEDS MIN MAX X_SEP Y_SEP LENGTH\
 [--dwell=<dwell>]
  leapNot (-h | --help)
  leapNot --version

Arguments:
  PASSES    max number of passes in test pattern
  POWERS    number of different power settings to try
  SPEEDS    number of different speed intervals to try
  MIN       min speed (feedrate) to try
  MAX       max speed (feedrate) to try
  X_SEP     separation between test lines on X axis
  Y_SEP     separation between test lines on Y axis
  LENGTH    length of test lines

Options:
  -h --help        Show this screen.
  --version        Show version.
  --dwell=<dwell>  Dwell time after changing laser PWM power (ms)

"""
from docopt import docopt

VERSION='leapNot 1.0'
MAX_PWM = 255
MINY = 10
MINX = 10
DWELL = 0
# M42 is set PWM, P is in, this has pin 10 
# for the fan and pin 45 for the laser PWM
GCODE_FAN_PWM_FMT_STRING = "M42 P10 S%d"
GCODE_LASER_PWM_FMT_STRING = "M42 P45 S%d"
PREAMBLE = "; " + VERSION + """

; turn off PWM to laser
""" + GCODE_LASER_PWM_FMT_STRING % (0) + """

; turn on PWM to fan
""" + GCODE_FAN_PWM_FMT_STRING % (MAX_PWM) + """

; home axes
G28

; set to absolute positioning
G90

; set units to millimeters
G21

"""


def dwell(dwell_time):
    print("G4 P%d" % (dwell_time))


def setPower(laser_power, dwell_time):
    print("M42 P45 S%d" % (int(laser_power)))
    dwell(dwell_time)


def setSpeed(feed_rate):
    print("G1 F%d" % (int(feed_rate)))


if __name__ == '__main__':
    args = docopt(__doc__, version=VERSION)

    speeds = int(args['SPEEDS'])
    min_speed = int(args['MIN'])
    max_speed = int(args['MAX'])
    speed_increment = (max_speed - min_speed) / (speeds - 1)

    passes = int(args['PASSES'])

    powers = int(args['POWERS'])
    power_increment = MAX_PWM / powers

    x_sep = int(args['X_SEP'])
    y_sep = int(args['Y_SEP'])
    line_length = int(args['LENGTH'])

    print(PREAMBLE)

    dwell = 0
    print(args)
    if args['--dwell'] is not None:
        dwell = int(args['--dwell'])
    print("; dwell = %d milliseconds" % (dwell))

    for speed_n in range(speeds):
        current_speed = min_speed + (speed_n * speed_increment)
        for pass_n in range(passes):
            y = MINY + (speed_n * y_sep) + (pass_n * speeds * y_sep)
            for power_n in range(powers):
                current_power = power_increment + power_n * power_increment
                print("%d\t%d\t%d" % (current_speed, pass_n, current_power))
