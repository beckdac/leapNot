#!/usr/bin/env python3
"""
leapNot.
E.g. ./leapNot 6 4 4 1000 80 200 5 5 30 --dwell=0

Usage:
  leapNot PASSES POWERS FEEDRATES MIN MAX X_SEP Y_SEP LENGTH\
 [--dwell=<dwell>]
  leapNot (-h | --help)
  leapNot --version

Arguments:
  PASSES    max number of passes in test pattern
  POWERS    number of different power settings to try
  FEEDRATES number of different feed_rate intervals to try
  MIN       min feed_rate (feed rate) to try
  MAX       max feed_rate (feed rate) to try
  X_SEP     separation between test lines on X axis
  Y_SEP     separation between test lines on Y axis
  LENGTH    length of test lines

Options:
  -h --help        Show this screen.
  --version        Show version.
  --dwell=<dwell>  Dwell time after changing laser PWM power (ms), default = 0

"""
from docopt import docopt

VERSION='leapNot 1.0'
MIN_PWM = 0
MAX_PWM = 255
MINY = 10
MINX = 10
DWELL = 0
# M42 is set PWM, P is in, this has pin 10 
# for the fan and pin 45 for the laser PWM
GCODE_FAN_PWM_FMT_STRING = "M42 P10 S%d"
GCODE_LASER_PWM_FMT_STRING = "M42 P45 S%d"
PREAMBLE = "; " + VERSION + """

; settings
%s

; turn off PWM to laser
""" + GCODE_LASER_PWM_FMT_STRING % (0) + """

; turn on PWM to fan
""" + GCODE_FAN_PWM_FMT_STRING % (MAX_PWM) + """

; home axes
G28

; set to absolute positioning
G90

; set units to millimeters
G21

"""

current_feed_rate = None
current_dwell = None


def setDwell(dwell_time):
    global current_dwell
    if current_dwell != dwell_time:
        print("G4 P%d" % (dwell_time))
        current_dwell = dwell_time


def setPower(laser_power, dwell_time):
    print("M42 P45 S%d" % (laser_power))
    setDwell(dwell_time)


def setFeedRate(feed_rate):
    global current_feed_rate
    if current_feed_rate != feed_rate:
        print("G1 F%d" % (feed_rate))
        current_feed_rate = feed_rate


def moveTo(x, y, feed_rate, laser_power, dwell_time):
    setFeedRate(feed_rate)
    print("G1 X%d Y%d" % (x, y))
    setPower(laser_power, dwell_time)


if __name__ == '__main__':
    args = docopt(__doc__, version=VERSION)

    feed_rates = int(args['FEEDRATES'])
    min_feed_rate = int(args['MIN'])
    max_feed_rate = int(args['MAX'])
    feed_rate_increment = (max_feed_rate - min_feed_rate) / (feed_rates - 1)

    passes = int(args['PASSES'])

    powers = int(args['POWERS'])
    power_increment = MAX_PWM / powers

    x_sep = int(args['X_SEP'])
    y_sep = int(args['Y_SEP'])
    line_length = int(args['LENGTH'])

    settings = '%s' % '\n'.join('; %s: %s' % i for i in sorted(args.items()))

    print(PREAMBLE % settings)

    dwell = 0
    if args['--dwell'] is not None:
        dwell = int(args['--dwell'])

    for pass_this_n in range(passes):
        for feed_rate_n in range(feed_rates):
            feed_rate = min_feed_rate + (feed_rate_n * feed_rate_increment)
            for pass_n in range(pass_this_n, passes):
                y = MINY + (feed_rate_n * y_sep) + (pass_n * feed_rates * y_sep)
                for power_n in range(powers):
                    power = power_increment + power_n * power_increment
                    x = MINX + (power_n * (line_length + x_sep))
                    moveTo(x, y, feed_rate, power, dwell)
                    moveTo(x + line_length, y, feed_rate, 0, 0)
